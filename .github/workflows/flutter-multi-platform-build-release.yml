name: Flutter Multi-Platform Build and Release

env:
  GOOGLE_DRIVE_CREDENTIALS: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
  GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: version
        type: string

jobs:
  build_android:
    name: Build Android APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.x'
          channel: 'stable'

      - name: Flutter pub get
        run: flutter pub get

      - name: Build APK
        run: flutter build apk --release --target-platform android-arm64

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release
          path: build/app/outputs/flutter-apk/app-release.apk

  build_windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.x'
          channel: 'stable'

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Flutter pub get
        run: flutter pub get

      - name: Build Windows
        run: flutter build windows --release

      - name: Create Windows ZIP
        run: |
          cd build/windows/x64/runner/Release
          powershell Compress-Archive -Path * -DestinationPath ../../../../../windows-release.zip

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: windows-release.zip

  build_macos:
    name: Build macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.x'
          channel: 'stable'

      - name: Enable macOS desktop
        run: flutter config --enable-macos-desktop

      - name: Flutter pub get
        run: flutter pub get

      - name: Build macOS
        run: flutter build macos --release

      - name: Create macOS DMG
        run: |
          cd build/macos/Build/Products/Release
          mkdir -p dmg
          cp -r *.app dmg/
          hdiutil create -volname "${GITHUB_REPOSITORY##*/}" -srcfolder dmg -ov -format UDZO ../../../../../macos-release.dmg

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: macos-release.dmg

  build_linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake libgtk-3-dev liblzma-dev libsecret-1-dev ninja-build pkg-config

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.x'
          channel: 'stable'

      - name: Enable Linux desktop
        run: flutter config --enable-linux-desktop

      - name: Flutter pub get
        run: flutter pub get

      - name: Build Linux
        run: flutter build linux --release

      - name: Create Linux tarball
        run: |
          cd build/linux/x64/release/bundle
          tar -czf ../../../../../linux-release.tar.gz *

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-release
          path: linux-release.tar.gz

  upload_to_gdrive:
    name: Upload Files to Google Drive
    needs: [build_android, build_windows, build_macos, build_linux]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib

      - name: Create Google Drive upload script
        run: |
          cat > upload_to_drive.py << 'EOF'
          import os
          import json
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload

          def upload_file_to_drive(file_path, file_name, folder_id=None):
              # Load service account credentials from environment variable
              creds_json = os.environ.get('GOOGLE_DRIVE_CREDENTIALS')
              if not creds_json:
                  raise ValueError("GOOGLE_DRIVE_CREDENTIALS environment variable not set")

              # Parse credentials
              creds_info = json.loads(creds_json)
              credentials = service_account.Credentials.from_service_account_info(
                  creds_info,
                  scopes=['https://www.googleapis.com/auth/drive.file']
              )

              # Build the service
              service = build('drive', 'v3', credentials=credentials)

              # File metadata
              file_metadata = {'name': file_name}
              if folder_id:
                  file_metadata['parents'] = [folder_id]

              # Upload file
              media = MediaFileUpload(file_path, resumable=True)
              file = service.files().create(
                  body=file_metadata,
                  media_body=media,
                  fields='id,webViewLink'
              ).execute()

              print(f"Uploaded {file_name} - File ID: {file.get('id')}")
              print(f"View link: {file.get('webViewLink')}")
              return file.get('id'), file.get('webViewLink')

          def main():
              version = os.environ.get('VERSION', 'unknown')
              folder_id = os.environ.get('GOOGLE_DRIVE_FOLDER_ID')  # Optional

              files_to_upload = [
                  ('android-release/app-release.apk', f'app-release-{version}.apk'),
                  ('windows-release/windows-release.zip', f'windows-release-{version}.zip'),
                  ('macos-release/macos-release.dmg', f'macos-release-{version}.dmg'),
                  ('linux-release/linux-release.tar.gz', f'linux-release-{version}.tar.gz')
              ]

              uploaded_files = {}

              for file_path, file_name in files_to_upload:
                  if os.path.exists(file_path):
                      file_id, view_link = upload_file_to_drive(file_path, file_name, folder_id)
                      uploaded_files[file_name] = {
                          'id': file_id,
                          'link': view_link
                      }
                  else:
                      print(f"Warning: {file_path} not found, skipping...")

              # Output summary
              print("\n=== Upload Summary ===")
              for file_name, info in uploaded_files.items():
                  print(f"{file_name}: {info['link']}")

          if __name__ == "__main__":
              main()
          EOF

      - name: Upload files to Google Drive
        env:
          GOOGLE_DRIVE_CREDENTIALS: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
          GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
          VERSION: ${{ inputs.version }}
        run: python upload_to_drive.py